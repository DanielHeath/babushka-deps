require 'fileutils'

class Object
  def returning obj, &block
    yield obj
    obj
  end
  def tap &block
    returning(self) { yield self }
  end
end

class PSQLBackup
  TimeFormat = "%Y-%m-%d-%H%M-%Z"
  ReservedDBNames = %w[
    template0
    template1
  ]

  def initialize
    @time = Time.now
    @timestamp = @time.strftime TimeFormat
    @backup_name = "sqldumps-#{@timestamp}"
    @backup_path = File.expand_path "~/backups/sqldumps"
    @dump_path = File.join @backup_path, @backup_name
  end

  def run hosts
    log "\nStarting sqldump run at #{@time} (#{@timestamp})."
    FileUtils.mkdir_p @dump_path
    dump_dbs && send_offsite(hosts) && remove_local
  end


  private

  def database_names
    shell('psql -l').split("\n").grep(/^ [^ ]/).map {|l|
      l.gsub(/\|.*$/, '').strip
    } - ReservedDBNames
  end

  def dump_dbs
    Dir.chdir @dump_path do
      database_names.all? {|db_name| dump_db db_name }
    end
  end

  def dump_db db_name
    sudo = '' # "sudo -u #{db_name}"
    log_shell db_name, "#{sudo} pg_dump #{db_name} > #{db_name}-#{@timestamp}.psql"
  end

  def send_offsite hosts
    Dir.chdir @backup_path do
      hosts.all? do |host|
        log_shell "sending to #{host}\n",
          "tar -zcvf - #{@backup_name}/ | ssh #{host} 'cat > ~/sqldumps/#{@backup_name}.tgz'"
      end
    end
  end

  def remove_local
    log_shell "Removing local sqldumps", "rm -rf #{@path}"
  end

  def shell cmd
    result = `#{cmd}`
    result if $? == 0
  end

  def log_shell message, cmd
    print message
    STDOUT.flush
    returning shell(cmd) do |result|
      log result ? '.' : " failed"
    end
  end

  def log message
    puts message
  end

end

PSQLBackup.new.run %w[
  <%= offsite_host %>
]
